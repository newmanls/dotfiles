#!/usr/bin/env python3
# dmenu script for (un)mounting removable storage devices. Depends on udisks2.
# Author: Newman Sanchez (https://github.com/newmanls)

import json
from subprocess import getoutput, run
from sys import argv


def print_help() -> None:
    print("Usage: dmenu-disks [mount|unmount]")
    quit(1)


def notify(type: str, message: str) -> None:
    match type:
        case "disk":
            icon = "drive-removable-media"
        case "info":
            icon = "dialog-information"
        case "error":
            icon = "dialog-error"
        case _:
            icon = ""

    run(["notify-send", "-i", icon, "udisks", message])


def is_mounted(device: dict) -> bool:
    return device["mountpoint"]


def is_not_excluded(device: dict) -> bool:
    excluded_fstypes = [None, "LVM2_member"]
    excluded_mountpoints = ["/", "/boot", "/boot/efi", "/home"]

    return (
        device["fstype"] not in excluded_fstypes and
        device["mountpoint"] not in excluded_mountpoints
    )


def get_devices(mounted: bool) -> list:
    lsblk_cmd = "lsblk -JMp -o name,fstype,mountpoint,size,label,uuid"
    lsblk = json.loads(getoutput(lsblk_cmd))["blockdevices"]
    devices = []

    for device in lsblk:
        if "children" in device:
            devices.extend(device["children"])
            del device["children"]
        else:
            devices.append(device)

    devices = [device for device in devices if is_not_excluded(device) and (
        is_mounted(device) if mounted else not is_mounted(device)
    )]

    return devices


def format_entry(device: dict) -> str:
    return "{}: {} ({})".format(
        device['name'], device['label'] or device['uuid'], device['size'])


def main(action: str):
    match action:
        case "mount":
            devices = get_devices(mounted=False)
        case "unmount":
            devices = get_devices(mounted=True)
        case _:
            print_help()

    if not devices:
        notify("info", f"No devices for {action}ing")
        quit()

    input_list = [format_entry(device) for device in devices]
    selected = run(
        ["dmenu", "-p", action],
        input="\n".join(input_list),
        capture_output=True,
        text=True
    ).stdout

    if selected:
        output = run(["udisksctl", action, "-b", selected.split(":")[0]],
                     capture_output=True)

        if output.returncode == 0:
            notify("disk", output.stdout)
        else:
            notify("error", output.stderr)


if __name__ == "__main__":
    try:
        main(argv[1])
    except IndexError:
        print_help()
